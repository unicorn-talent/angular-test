{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app-routing.module.ts","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/components/employee-create/employee-create.component.css","webpack:///./src/app/components/employee-create/employee-create.component.html","webpack:///./src/app/components/employee-create/employee-create.component.ts","webpack:///./src/app/components/employee-edit/employee-edit.component.css","webpack:///./src/app/components/employee-edit/employee-edit.component.html","webpack:///./src/app/components/employee-edit/employee-edit.component.ts","webpack:///./src/app/components/employee-list/employee-list.component.css","webpack:///./src/app/components/employee-list/employee-list.component.html","webpack:///./src/app/components/employee-list/employee-list.component.ts","webpack:///./src/app/components/order-list/order-list.component.css","webpack:///./src/app/components/order-list/order-list.component.html","webpack:///./src/app/components/order-list/order-list.component.ts","webpack:///./src/app/components/product-create/product-create.component.css","webpack:///./src/app/components/product-create/product-create.component.html","webpack:///./src/app/components/product-create/product-create.component.ts","webpack:///./src/app/components/product-list/product-list.component.css","webpack:///./src/app/components/product-list/product-list.component.html","webpack:///./src/app/components/product-list/product-list.component.ts","webpack:///./src/app/service/api.service.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { EmployeeCreateComponent } from './components/employee-create/employee-create.component';\r\nimport { EmployeeListComponent } from './components/employee-list/employee-list.component';\r\nimport { EmployeeEditComponent } from './components/employee-edit/employee-edit.component';\r\nimport { ProductCreateComponent } from './components/product-create/product-create.component';\r\nimport { ProductListComponent } from './components/product-list/product-list.component';\r\nimport { OrderListComponent } from './components/order-list/order-list.component';\r\n\r\nconst routes: Routes = [\r\n  { path: '', pathMatch: 'full', redirectTo: 'create-employee' },\r\n  { path: 'create-employee', component: EmployeeCreateComponent },\r\n  { path: 'edit-employee/:id', component: EmployeeEditComponent },\r\n  { path: 'employees-list', component: EmployeeListComponent },\r\n  { path: 'seller/product-create', component: ProductCreateComponent },\r\n  { path: 'customer/product-list', component: ProductListComponent },\r\n  { path: 'seller/order-list', component: OrderListComponent },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule]\r\n})\r\n\r\nexport class AppRoutingModule { }\r\n","module.exports = \".menu-spacer {\\r\\n  flex: 1 1 auto;\\r\\n}\\r\\n\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvYXBwLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxjQUFjO0FBQ2hCIiwiZmlsZSI6InNyYy9hcHAvYXBwLmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyIubWVudS1zcGFjZXIge1xyXG4gIGZsZXg6IDEgMSBhdXRvO1xyXG59XHJcbiJdfQ== */\"","module.exports = \"<div class=\\\"d-flex flex-column flex-md-row align-items-center p-3 px-md-4 mb-3 bg-white border-bottom shadow-sm\\\">\\r\\n  <h5 class=\\\"my-0 mr-md-auto font-weight-normal\\\">E Commerce Application</h5>\\r\\n  <nav class=\\\"my-2 my-md-0 mr-md-3\\\">\\r\\n    <a class=\\\"btn btn-outline-primary\\\" routerLinkActive=\\\"active\\\" routerLink=\\\"/seller/order-list\\\">Seller View</a>\\r\\n  </nav>\\r\\n  <a class=\\\"btn btn-outline-primary\\\" routerLinkActive=\\\"active\\\" routerLink=\\\"/customer/product-list\\\">Customer View</a>\\r\\n\\r\\n</div>\\r\\n\\r\\n<router-outlet></router-outlet>\\r\\n\"","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent {\r\n  title = 'mean-stack-crud-app';\r\n}\r\n","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\n\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\n\r\nimport { EmployeeCreateComponent } from './components/employee-create/employee-create.component';\r\nimport { EmployeeListComponent } from './components/employee-list/employee-list.component';\r\nimport { EmployeeEditComponent } from './components/employee-edit/employee-edit.component';\r\n\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { HttpClientModule } from '@angular/common/http';\r\n\r\nimport { ApiService } from './service/api.service';\r\nimport { ProductListComponent } from './components/product-list/product-list.component';\r\nimport { ProductCreateComponent } from './components/product-create/product-create.component';\r\nimport { OrderListComponent } from './components/order-list/order-list.component';\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    EmployeeCreateComponent,\r\n    EmployeeListComponent,\r\n    EmployeeEditComponent,\r\n    ProductListComponent,\r\n    ProductCreateComponent,\r\n    OrderListComponent,  ],\r\n  imports: [\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    ReactiveFormsModule,\r\n    HttpClientModule\r\n  ],\r\n  providers: [ApiService],\r\n  bootstrap: [AppComponent]\r\n})\r\n\r\nexport class AppModule { }\r\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvZW1wbG95ZWUtY3JlYXRlL2VtcGxveWVlLWNyZWF0ZS5jb21wb25lbnQuY3NzIn0= */\"","module.exports = \"<div class=\\\"row justify-content-center\\\">\\r\\n  <div class=\\\"col-md-4 register-employee\\\">\\r\\n    <!-- form card register -->\\r\\n    <div class=\\\"card-body\\\">\\r\\n      <form [formGroup]=\\\"employeeForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\r\\n        <div class=\\\"form-group\\\">\\r\\n          <label for=\\\"inputName\\\">Name</label>\\r\\n          <input class=\\\"form-control\\\" type=\\\"text\\\" formControlName=\\\"name\\\">\\r\\n          <!-- error -->\\r\\n          <div class=\\\"invalid-feedback\\\" *ngIf=\\\"submitted && myForm.name.errors?.required\\\">\\r\\n            Name is required.\\r\\n          </div>\\r\\n        </div>\\r\\n\\r\\n        <div class=\\\"form-group\\\">\\r\\n          <label for=\\\"inputEmail3\\\">Email</label>\\r\\n          <input class=\\\"form-control\\\" type=\\\"text\\\" formControlName=\\\"email\\\">\\r\\n          <!-- error -->\\r\\n          <div class=\\\"invalid-feedback\\\" *ngIf=\\\"submitted && myForm.email.errors?.required\\\">\\r\\n            Enter your email.\\r\\n          </div>\\r\\n          <div class=\\\"invalid-feedback\\\" *ngIf=\\\"submitted && myForm.email.errors?.pattern\\\">\\r\\n            Enter valid email.\\r\\n          </div>\\r\\n        </div>\\r\\n\\r\\n        <div class=\\\"form-group\\\">\\r\\n          <label for=\\\"inputPassword3\\\">Designation</label>\\r\\n          <select class=\\\"custom-select form-control\\\" (change)=\\\"updateProfile($event.target.value)\\\"\\r\\n            formControlName=\\\"designation\\\">\\r\\n            <option value=\\\"\\\">Choose...</option>\\r\\n            <option *ngFor=\\\"let employeeProfile of EmployeeProfile\\\" value=\\\"{{employeeProfile}}\\\">{{employeeProfile}}\\r\\n            </option>\\r\\n          </select>\\r\\n          <!-- error -->\\r\\n          <div class=\\\"invalid-feedback\\\" *ngIf=\\\"submitted && myForm.designation.errors?.required\\\">\\r\\n            Choose designation.\\r\\n          </div>\\r\\n        </div>\\r\\n\\r\\n        <div class=\\\"form-group\\\">\\r\\n          <label for=\\\"inputVerify3\\\">Mobile No</label>\\r\\n          <input class=\\\"form-control\\\" type=\\\"text\\\" formControlName=\\\"phoneNumber\\\">\\r\\n          <!-- error -->\\r\\n          <div class=\\\"invalid-feedback\\\" *ngIf=\\\"submitted && myForm.phoneNumber.errors?.required\\\">\\r\\n            Enter your phone number.\\r\\n          </div>\\r\\n          <div class=\\\"invalid-feedback\\\" *ngIf=\\\"submitted && myForm.phoneNumber.errors?.pattern\\\">\\r\\n            Enter Numbers Only\\r\\n          </div>\\r\\n        </div>\\r\\n\\r\\n        <div class=\\\"form-group\\\">\\r\\n          <button class=\\\"btn btn-success btn-lg btn-block\\\" type=\\\"submit\\\">Register</button>\\r\\n        </div>\\r\\n      </form>\\r\\n\\r\\n    </div>\\r\\n  </div><!-- form card register -->\\r\\n</div>\\r\\n\"","import { Router } from '@angular/router';\r\nimport { ApiService } from './../../service/api.service';\r\nimport { Component, OnInit, NgZone } from '@angular/core';\r\nimport { FormGroup, FormBuilder, Validators } from \"@angular/forms\";\r\n\r\n@Component({\r\n  selector: 'app-employee-create',\r\n  templateUrl: './employee-create.component.html',\r\n  styleUrls: ['./employee-create.component.css']\r\n})\r\n\r\nexport class EmployeeCreateComponent implements OnInit {  \r\n  submitted = false;\r\n  employeeForm: FormGroup;\r\n  EmployeeProfile:any = ['Finance', 'BDM', 'HR', 'Sales', 'Admin']\r\n  \r\n  constructor(\r\n    public fb: FormBuilder,\r\n    private router: Router,\r\n    private ngZone: NgZone,\r\n    private apiService: ApiService\r\n  ) { \r\n    this.mainForm();\r\n  }\r\n\r\n  ngOnInit() { }\r\n\r\n  mainForm() {\r\n    this.employeeForm = this.fb.group({\r\n      name: ['', [Validators.required]],\r\n      email: ['', [Validators.required, Validators.pattern('[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,3}$')]],\r\n      designation: ['', [Validators.required]],\r\n      phoneNumber: ['', [Validators.required, Validators.pattern('^[0-9]+$')]]\r\n    })\r\n  }\r\n\r\n  // Choose designation with select dropdown\r\n  updateProfile(e){\r\n    this.employeeForm.get('designation').setValue(e, {\r\n      onlySelf: true\r\n    })\r\n  }\r\n\r\n  // Getter to access form control\r\n  get myForm(){\r\n    return this.employeeForm.controls;\r\n  }\r\n\r\n  onSubmit() {\r\n    this.submitted = true;\r\n    if (!this.employeeForm.valid) {\r\n      return false;\r\n    } else {\r\n      this.apiService.createEmployee(this.employeeForm.value).subscribe(\r\n        (res) => {\r\n          console.log('Employee successfully created!')\r\n          this.ngZone.run(() => this.router.navigateByUrl('/employees-list'))\r\n        }, (error) => {\r\n          console.log(error);\r\n        });\r\n    }\r\n  }\r\n\r\n}\r\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvZW1wbG95ZWUtZWRpdC9lbXBsb3llZS1lZGl0LmNvbXBvbmVudC5jc3MifQ== */\"","module.exports = \" <div class=\\\"row justify-content-center\\\">\\r\\n   <div class=\\\"col-md-4 register-employee\\\">\\r\\n     <!-- form card register -->\\r\\n     <div class=\\\"card card-outline-secondary\\\">\\r\\n       <div class=\\\"card-header\\\">\\r\\n         <h3 class=\\\"mb-0\\\">Edit Employee</h3>\\r\\n       </div>\\r\\n       <div class=\\\"card-body\\\">\\r\\n         <form [formGroup]=\\\"editForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\r\\n\\r\\n           <div class=\\\"form-group\\\">\\r\\n             <label for=\\\"inputName\\\">Name</label>\\r\\n             <input class=\\\"form-control\\\" type=\\\"text\\\" formControlName=\\\"name\\\">\\r\\n             <div class=\\\"invalid-feedback\\\" *ngIf=\\\"submitted && myForm.name.errors?.required\\\">\\r\\n               Name is required.\\r\\n             </div>\\r\\n           </div>\\r\\n           <div class=\\\"form-group\\\">\\r\\n             <label for=\\\"inputEmail3\\\">Email</label>\\r\\n             <input class=\\\"form-control\\\" type=\\\"text\\\" formControlName=\\\"email\\\">\\r\\n             <!-- error -->\\r\\n             <div class=\\\"invalid-feedback\\\" *ngIf=\\\"submitted && myForm.email.errors?.required\\\">\\r\\n               Enter your email.\\r\\n             </div>\\r\\n             <div class=\\\"invalid-feedback\\\" *ngIf=\\\"submitted && myForm.email.errors?.pattern\\\">\\r\\n               Enter valid email.\\r\\n             </div>\\r\\n           </div>\\r\\n\\r\\n           <div class=\\\"form-group\\\">\\r\\n             <label for=\\\"inputPassword3\\\">Designation</label>\\r\\n             <select class=\\\"custom-select form-control\\\" (change)=\\\"updateProfile($event.target.value)\\\"\\r\\n               formControlName=\\\"designation\\\">\\r\\n               <option value=\\\"\\\">Choose...</option>\\r\\n               <option *ngFor=\\\"let employeeProfile of EmployeeProfile\\\" value=\\\"{{employeeProfile}}\\\">{{employeeProfile}}\\r\\n               </option>\\r\\n             </select>\\r\\n             <!-- error -->\\r\\n             <div class=\\\"invalid-feedback\\\" *ngIf=\\\"submitted && myForm.designation.errors?.required\\\">\\r\\n               Choose designation.\\r\\n             </div>\\r\\n           </div>\\r\\n\\r\\n           <div class=\\\"form-group\\\">\\r\\n             <label for=\\\"inputVerify3\\\">Mobile No</label>\\r\\n             <input class=\\\"form-control\\\" type=\\\"text\\\" formControlName=\\\"phoneNumber\\\">\\r\\n             <!-- error -->\\r\\n             <div class=\\\"invalid-feedback\\\" *ngIf=\\\"submitted && myForm.phoneNumber.errors?.required\\\">\\r\\n               Enter your phone number.\\r\\n             </div>\\r\\n             <div class=\\\"invalid-feedback\\\" *ngIf=\\\"submitted && myForm.phoneNumber.errors?.pattern\\\">\\r\\n               Enter Numbers Only\\r\\n             </div>\\r\\n           </div>\\r\\n\\r\\n           <div class=\\\"form-group\\\">\\r\\n             <button class=\\\"btn btn-success btn-lg btn-block\\\" type=\\\"submit\\\">Update</button>\\r\\n           </div>\\r\\n         </form>\\r\\n       </div>\\r\\n     </div><!-- form  -->\\r\\n   </div>\\r\\n </div>\\r\\n\"","import { Employee } from './../../model/Employee';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Router } from \"@angular/router\";\r\nimport { ApiService } from './../../service/api.service';\r\nimport { FormGroup, FormBuilder, Validators } from \"@angular/forms\";\r\n\r\n\r\n@Component({\r\n  selector: 'app-employee-edit',\r\n  templateUrl: './employee-edit.component.html',\r\n  styleUrls: ['./employee-edit.component.css']\r\n})\r\n\r\nexport class EmployeeEditComponent implements OnInit {\r\n  submitted = false;\r\n  editForm: FormGroup;\r\n  employeeData: Employee[];\r\n  EmployeeProfile: any = ['Finance', 'BDM', 'HR', 'Sales', 'Admin']\r\n\r\n  constructor(\r\n    public fb: FormBuilder,\r\n    private actRoute: ActivatedRoute,\r\n    private apiService: ApiService,\r\n    private router: Router\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.updateEmployee();\r\n    let id = this.actRoute.snapshot.paramMap.get('id');\r\n    this.getEmployee(id);\r\n    this.editForm = this.fb.group({\r\n      name: ['', [Validators.required]],\r\n      email: ['', [Validators.required, Validators.pattern('[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,3}$')]],\r\n      designation: ['', [Validators.required]],\r\n      phoneNumber: ['', [Validators.required, Validators.pattern('^[0-9]+$')]]\r\n    })\r\n  }\r\n\r\n  // Choose options with select-dropdown\r\n  updateProfile(e) {\r\n    this.editForm.get('designation').setValue(e, {\r\n      onlySelf: true\r\n    })\r\n  }\r\n\r\n  // Getter to access form control\r\n  get myForm() {\r\n    return this.editForm.controls;\r\n  }\r\n\r\n  getEmployee(id) {\r\n    this.apiService.getEmployee(id).subscribe(data => {\r\n      this.editForm.setValue({\r\n        name: data['name'],\r\n        email: data['email'],\r\n        designation: data['designation'],\r\n        phoneNumber: data['phoneNumber'],\r\n      });\r\n    });\r\n  }\r\n\r\n  updateEmployee() {\r\n    this.editForm = this.fb.group({\r\n      name: ['', [Validators.required]],\r\n      email: ['', [Validators.required, Validators.pattern('[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,3}$')]],\r\n      designation: ['', [Validators.required]],\r\n      phoneNumber: ['', [Validators.required, Validators.pattern('^[0-9]+$')]]\r\n    })\r\n  }\r\n\r\n  onSubmit() {\r\n    this.submitted = true;\r\n    if (!this.editForm.valid) {\r\n      return false;\r\n    } else {\r\n      if (window.confirm('Are you sure?')) {\r\n        let id = this.actRoute.snapshot.paramMap.get('id');\r\n        this.apiService.updateEmployee(id, this.editForm.value)\r\n          .subscribe(res => {\r\n            this.router.navigateByUrl('/employees-list');\r\n            console.log('Content updated successfully!')\r\n          }, (error) => {\r\n            console.log(error)\r\n          })\r\n      }\r\n    }\r\n  }\r\n\r\n}","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvZW1wbG95ZWUtbGlzdC9lbXBsb3llZS1saXN0LmNvbXBvbmVudC5jc3MifQ== */\"","module.exports = \"<div class=\\\"container\\\">\\r\\n  <!-- No data message -->\\r\\n  <p *ngIf=\\\"Employee.length <= 0\\\" class=\\\"no-data text-center\\\">There is no employee added yet!</p>\\r\\n\\r\\n  <!-- Employee list -->\\r\\n  <table class=\\\"table table-bordered\\\" *ngIf=\\\"Employee.length > 0\\\">\\r\\n    <thead class=\\\"table-success\\\">\\r\\n      <tr>\\r\\n        <th scope=\\\"col\\\">Employee ID</th>\\r\\n        <th scope=\\\"col\\\">Name</th>\\r\\n        <th scope=\\\"col\\\">Email</th>\\r\\n        <th scope=\\\"col\\\">Designation</th>\\r\\n        <th scope=\\\"col\\\">Phone No</th>\\r\\n        <th scope=\\\"col center\\\">Update</th>\\r\\n      </tr>\\r\\n    </thead>\\r\\n    <tbody>\\r\\n      <tr *ngFor=\\\"let employee of Employee; let i = index\\\">\\r\\n        <th scope=\\\"row\\\">{{employee._id}}</th>\\r\\n        <td>{{employee.name}}</td>\\r\\n        <td>{{employee.email}}</td>\\r\\n        <td>{{employee.designation}}</td>\\r\\n        <td>{{employee.phoneNumber}}</td>\\r\\n        <td class=\\\"text-center edit-block\\\">\\r\\n          <span class=\\\"edit\\\" [routerLink]=\\\"['/edit-employee/', employee._id]\\\">\\r\\n            <button type=\\\"button\\\" class=\\\"btn btn-success btn-sm\\\">Edit</button>\\r\\n          </span>\\r\\n          <span class=\\\"delete\\\" (click)=\\\"removeEmployee(employee, i)\\\">\\r\\n            <button type=\\\"button\\\" class=\\\"btn btn-danger btn-sm\\\">Delete</button>\\r\\n          </span>\\r\\n        </td>\\r\\n      </tr>\\r\\n    </tbody>\\r\\n  </table>\\r\\n</div>\"","import { Component, OnInit } from '@angular/core';\r\nimport { ApiService } from './../../service/api.service';\r\n\r\n@Component({\r\n  selector: 'app-employee-list',\r\n  templateUrl: './employee-list.component.html',\r\n  styleUrls: ['./employee-list.component.css']\r\n})\r\n\r\nexport class EmployeeListComponent implements OnInit {\r\n  \r\n  Employee:any = [];\r\n\r\n  constructor(private apiService: ApiService) { \r\n    this.readEmployee();\r\n  }\r\n\r\n  ngOnInit() {}\r\n\r\n  readEmployee(){\r\n    this.apiService.getEmployees().subscribe((data) => {\r\n     this.Employee = data;\r\n    })    \r\n  }\r\n\r\n  removeEmployee(employee, index) {\r\n    if(window.confirm('Are you sure?')) {\r\n        this.apiService.deleteEmployee(employee._id).subscribe((data) => {\r\n          this.Employee.splice(index, 1);\r\n        }\r\n      )    \r\n    }\r\n  }\r\n\r\n}","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvb3JkZXItbGlzdC9vcmRlci1saXN0LmNvbXBvbmVudC5jc3MifQ== */\"","module.exports = \"\\n\\n<div class=\\\"container\\\">\\n  <a class=\\\"btn btn-outline-primary\\\" routerLinkActive=\\\"active\\\" routerLink=\\\"/seller/product-create\\\">Add Products</a>\\n  <br/>\\n  <!-- No data message -->\\n  <p *ngIf=\\\"Orders.length <= 0\\\" class=\\\"no-data text-center\\\">There is no Orders added yet!</p>\\n\\n  <!-- Employee list -->\\n  <table class=\\\"table table-bordered\\\" *ngIf=\\\"Orders.length > 0\\\">\\n    <thead class=\\\"table-success\\\">\\n      <tr>\\n        <th scope=\\\"col\\\">Order ID</th>\\n        <th scope=\\\"col\\\">Product Name</th>\\n        <th scope=\\\"col\\\">Customer Name</th>\\n        <th scope=\\\"col\\\">Price</th>\\n        <th scope=\\\"col\\\">Status</th>\\n        <th scope=\\\"col\\\">Created on</th>\\n        <th scope=\\\"col center\\\">Action</th>\\n      </tr>\\n    </thead>\\n    <tbody>\\n      <tr *ngFor=\\\"let order of Orders; let i = index\\\">\\n        <th scope=\\\"row\\\">{{order._id}}</th>\\n        <td>{{order.productId.name}}</td>\\n        <td>{{order.customerId.name}}</td>\\n        <td>{{order.productId.price}}</td>\\n        <td>{{order.status}}</td>\\n        <td>{{order.createdOn | date}}</td>\\n        <td class=\\\"text-center edit-block\\\">\\n          <ng-container *ngIf=\\\"order.status === 'Pending'\\\">\\n            <span class=\\\"edit\\\" (click)=\\\"updateOrder('accept',order, i)\\\">\\n              <button type=\\\"button\\\" class=\\\"btn btn-success btn-sm\\\">A</button>\\n            </span>\\n            <span class=\\\"delete\\\" (click)=\\\"updateOrder('reject',order, i)\\\">\\n              <button type=\\\"button\\\" class=\\\"btn btn-danger btn-sm\\\">R</button>\\n            </span>\\n          </ng-container>\\n          <ng-container *ngIf=\\\"order.status != 'Pending'\\\">\\n            {{order.status}}\\n          </ng-container>\\n        </td>\\n      </tr>\\n    </tbody>\\n  </table>\\n</div>\\n\\n\"","import { Component, OnInit } from '@angular/core';\nimport { ApiService } from './../../service/api.service';\n@Component({\n  selector: 'app-order-list',\n  templateUrl: './order-list.component.html',\n  styleUrls: ['./order-list.component.css']\n})\nexport class OrderListComponent implements OnInit {\n  Orders: any = [];\n\n  constructor(private apiService: ApiService) {\n    this.readOrders();\n  }\n\n  ngOnInit() {\n  }\n\n  updateOrder(status, order, i) {\n      if (window.confirm('Are you sure?')) {\n        const id = order._id;\n        order.status = status;\n        this.apiService.updateOrder(id, order)\n          .subscribe(res => {\n            alert('Content updated successfully!');\n            this.readOrders();\n          }, (error) => {\n            console.log(error);\n          })\n    }\n  }\n\n\n  readOrders() {\n    this.apiService.getOrders().subscribe((data) => {\n      this.Orders = data;\n    });\n  }\n\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvcHJvZHVjdC1jcmVhdGUvcHJvZHVjdC1jcmVhdGUuY29tcG9uZW50LmNzcyJ9 */\"","module.exports = \"<div class=\\\"row justify-content-center\\\">\\n  <div class=\\\"col-md-4 register-employee\\\">\\n    <!-- form card register -->\\n    <div class=\\\"card-body\\\">\\n      <form [formGroup]=\\\"productForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\n        <div class=\\\"form-group\\\">\\n          <label for=\\\"inputName\\\">Product Name</label>\\n          <input class=\\\"form-control\\\" type=\\\"text\\\" formControlName=\\\"name\\\">\\n          <!-- error -->\\n          <div class=\\\"invalid-feedback\\\" *ngIf=\\\"submitted && myForm.name.errors?.required\\\">\\n            Name is required.\\n          </div>\\n        </div>\\n\\n        <div class=\\\"form-group\\\">\\n          <label for=\\\"inputEmail3\\\">Description</label>\\n          <input class=\\\"form-control\\\" type=\\\"text\\\" formControlName=\\\"description\\\">\\n          <!-- error -->\\n          <div class=\\\"invalid-feedback\\\" *ngIf=\\\"submitted && myForm.description.errors?.required\\\">\\n            Enter Product Description.\\n          </div>\\n        </div>\\n\\n        <div class=\\\"form-group\\\">\\n          <label for=\\\"inputPassword3\\\">Category</label>\\n          <select class=\\\"custom-select form-control\\\" (change)=\\\"updateProfile($event.target.value)\\\"\\n            formControlName=\\\"category\\\">\\n            <option value=\\\"\\\">Choose...</option>\\n            <option *ngFor=\\\"let categoryProfile of CategoryProfile\\\" value=\\\"{{categoryProfile}}\\\">{{categoryProfile}}\\n            </option>\\n          </select>\\n          <!-- error -->\\n          <div class=\\\"invalid-feedback\\\" *ngIf=\\\"submitted && myForm.designation.errors?.required\\\">\\n            Choose category.\\n          </div>\\n        </div>\\n\\n        <div class=\\\"form-group\\\">\\n          <label for=\\\"inputVerify3\\\">Price</label>\\n          <input class=\\\"form-control\\\" type=\\\"text\\\" formControlName=\\\"price\\\">\\n          <!-- error -->\\n          <div class=\\\"invalid-feedback\\\" *ngIf=\\\"submitted && myForm.price.errors?.required\\\">\\n            Enter Product Price.\\n          </div>\\n          <div class=\\\"invalid-feedback\\\" *ngIf=\\\"submitted && myForm.price.errors?.pattern\\\">\\n            Enter Numbers Only\\n          </div>\\n        </div>\\n\\n        <div class=\\\"form-group\\\">\\n          <button class=\\\"btn btn-success btn-lg btn-block\\\" type=\\\"submit\\\">Submit</button>\\n        </div>\\n      </form>\\n\\n    </div>\\n  </div><!-- form card register -->\\n</div>\\n\"","import { ApiService } from './../../service/api.service';\nimport { Router } from '@angular/router';\nimport { Component, OnInit, NgZone } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\n@Component({\n  selector: 'app-product-create',\n  templateUrl: './product-create.component.html',\n  styleUrls: ['./product-create.component.css']\n})\nexport class ProductCreateComponent implements OnInit {\n  submitted = false;\n  productForm: FormGroup;\n  CategoryProfile: any = ['Fashion', 'Men', 'Girls', 'Women', 'Accessories']\n  constructor(\n    public fb: FormBuilder,\n    private router: Router,\n    private ngZone: NgZone,\n    private apiService: ApiService\n  ) {\n    this.mainForm();\n  }\n\n\n  ngOnInit() {\n  }\n\n  mainForm() {\n    this.productForm = this.fb.group({\n      name: ['', [Validators.required]],\n      description: ['', [Validators.required]],\n      category: ['', [Validators.required]],\n      price: ['', [Validators.required, Validators.pattern('^[0-9]+$')]]\n    });\n  }\n\n  updateProfile(e){\n    this.productForm.get('category').setValue(e, {\n      onlySelf: true\n    });\n  }\n\n  onSubmit() {\n    this.submitted = true;\n    if (!this.productForm.valid) {\n      return false;\n    } else {\n      this.apiService.createProduct(this.productForm.value).subscribe(\n        (res) => {\n          console.log('Employee successfully created!');\n          this.ngZone.run(() => this.router.navigateByUrl('/customer/product-list'));\n        }, (error) => {\n          console.log(error);\n        });\n    }\n  }\n\n  get myForm() {\n    return this.productForm.controls;\n  }\n\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvcHJvZHVjdC1saXN0L3Byb2R1Y3QtbGlzdC5jb21wb25lbnQuY3NzIn0= */\"","module.exports = \"<div class=\\\"container\\\">\\n  <!-- No data message -->\\n  <p *ngIf=\\\"Product.length <= 0\\\" class=\\\"no-data text-center\\\">There is no Product added yet!</p>\\n\\n  <!-- Employee list -->\\n  <table class=\\\"table table-bordered\\\" *ngIf=\\\"Product.length > 0\\\">\\n    <thead class=\\\"table-success\\\">\\n      <tr>\\n        <th scope=\\\"col\\\">Product ID</th>\\n        <th scope=\\\"col\\\">Name</th>\\n        <th scope=\\\"col\\\">Category</th>\\n        <th scope=\\\"col\\\">Description</th>\\n        <th scope=\\\"col\\\">Price</th>\\n        <th scope=\\\"col center\\\">Action</th>\\n      </tr>\\n    </thead>\\n    <tbody>\\n      <tr *ngFor=\\\"let product of Product; let i = index\\\">\\n        <th scope=\\\"row\\\">{{product._id}}</th>\\n        <td>{{product.name}}</td>\\n        <td>{{product.category}}</td>\\n        <td>{{product.description}}</td>\\n        <td>{{product.price}}</td>\\n        <td class=\\\"text-center edit-block\\\">\\n          <span class=\\\"edit\\\" (click)=\\\"buyProduct(product, i)\\\">\\n            <button type=\\\"button\\\" class=\\\"btn btn-success btn-sm\\\">Buy</button>\\n          </span>\\n        </td>\\n      </tr>\\n    </tbody>\\n  </table>\\n</div>\\n\"","import { Component, OnInit } from '@angular/core';\nimport { ApiService } from './../../service/api.service';\n@Component({\n  selector: 'app-product-list',\n  templateUrl: './product-list.component.html',\n  styleUrls: ['./product-list.component.css']\n})\nexport class ProductListComponent implements OnInit {\n  Product: any = [];\n\n  constructor(private apiService: ApiService) {\n    this.readEmployee();\n  }\n\n  ngOnInit(){\n\n  }\n  readEmployee() {\n    this.apiService.getProducts().subscribe((data) => {\n      this.Product = data;\n    });\n  }\n\n  buyProduct(product, i) {\n    const orderObj = {\n      customerId: '5eb86855f3bd49a4172b2a1c',\n      productId: product._id,\n    };\n    this.apiService.createOrder(orderObj).subscribe((res) => {\n      console.log('Employee successfully created!');\n      alert('Order successfully placed');\n    }, (error) => {\n      console.log(error);\n    });\n  }\n\n}\n","import { Injectable } from '@angular/core';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError, map } from 'rxjs/operators';\r\nimport { HttpClient, HttpHeaders, HttpErrorResponse } from '@angular/common/http';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\n\r\nexport class ApiService {\r\n  baseUri:string = 'http://localhost:4000/api';\r\n  productUri:string = 'http://localhost:4000/product';\r\n  orderUri:string = 'http://localhost:4000/order';\r\n  headers = new HttpHeaders().set('Content-Type', 'application/json');\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  // Create\r\n  createEmployee(data): Observable<any> {\r\n    let url = `${this.baseUri}/create`;\r\n    return this.http.post(url, data)\r\n      .pipe(\r\n        catchError(this.errorMgmt)\r\n      )\r\n  }\r\n\r\n  createProduct(data): Observable<any> {\r\n    let url = `${this.productUri}/create`;\r\n    return this.http.post(url, data)\r\n      .pipe(\r\n        catchError(this.errorMgmt)\r\n      )\r\n  }\r\n\r\n  createOrder(data): Observable<any> {\r\n    let url = `${this.orderUri}/create`;\r\n    return this.http.post(url, data)\r\n      .pipe(\r\n        catchError(this.errorMgmt)\r\n      )\r\n  }\r\n\r\n  // Get all employees\r\n  getEmployees() {\r\n    return this.http.get(`${this.baseUri}`);\r\n  }\r\n\r\n  getProducts() {\r\n    return this.http.get(`${this.productUri}`);\r\n  }\r\n\r\n  getOrders(){\r\n    return this.http.get(`${this.orderUri}`);\r\n  }\r\n\r\n\r\n\r\n  // Get employee\r\n  getEmployee(id): Observable<any> {\r\n    let url = `${this.baseUri}/read/${id}`;\r\n    return this.http.get(url, {headers: this.headers}).pipe(\r\n      map((res: Response) => {\r\n        return res || {}\r\n      }),\r\n      catchError(this.errorMgmt)\r\n    )\r\n  }\r\n\r\n  // Update employee\r\n  updateEmployee(id, data): Observable<any> {\r\n    let url = `${this.baseUri}/update/${id}`;\r\n    return this.http.put(url, data, { headers: this.headers }).pipe(\r\n      catchError(this.errorMgmt)\r\n    )\r\n  }\r\n\r\n  updateOrder(id, data): Observable<any> {\r\n    let url = `${this.orderUri}/update/${id}`;\r\n    return this.http.put(url, data, { headers: this.headers }).pipe(\r\n      catchError(this.errorMgmt)\r\n    )\r\n  }\r\n\r\n  // Delete employee\r\n  deleteEmployee(id): Observable<any> {\r\n    let url = `${this.baseUri}/delete/${id}`;\r\n    return this.http.delete(url, { headers: this.headers }).pipe(\r\n      catchError(this.errorMgmt)\r\n    )\r\n  }\r\n\r\n  // Error handling\r\n  errorMgmt(error: HttpErrorResponse) {\r\n    let errorMessage = '';\r\n    if (error.error instanceof ErrorEvent) {\r\n      // Get client-side error\r\n      errorMessage = error.error.message;\r\n    } else {\r\n      // Get server-side error\r\n      errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\r\n    }\r\n    console.log(errorMessage);\r\n    return throwError(errorMessage);\r\n  }\r\n\r\n}\r\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n"],"sourceRoot":""}